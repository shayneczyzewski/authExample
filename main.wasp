app authExample {
  title: "authExample",
  auth: {
    userEntity: User,
    externalAuthEntity: SocialLogin,
    methods: {
      usernameAndPassword: {},
      google: {}
    },
    onAuthFailedRedirectTo: "/login"
  }
}

route HomeRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@ext/pages/Main"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@ext/pages/auth/Signup"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@ext/pages/auth/Login"
}

entity User {=psl
    id                        Int           @id @default(autoincrement())
    username                  String        @unique
    password                  String
    externalAuthAssociations  SocialLogin[]
psl=}

entity SocialLogin {=psl
  id          Int       @id @default(autoincrement())
  provider    String
  providerId  String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime  @default(now())
  @@unique([provider, providerId, userId])
psl=}
